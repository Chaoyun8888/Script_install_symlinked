#!/bin/bash

__git_prompt() {
  local s=''
  local branchName=''
  local style=''

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null

      # Check if we are ahead or behind our tracking branch (https://gist.github.com/HowlingMind/996093).
      local git_status="$(git status 2> /dev/null)"
      local remote_pattern="Your branch is (ahead|behind).*by ([[:digit:]]*) commit"
      local remote_pattern_de="Ihr Branch ist (vor|hinter).*um ([[:digit:]]*) Commits"

      if [[ $git_status} =~ $remote_pattern ]] || [[ $git_status =~ $remote_pattern_de ]]; then

        if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
          s+="${ICON_FOR_DOWN}${BASH_REMATCH[2]} "
        else
          s+="${ICON_FOR_UP}${BASH_REMATCH[2]} "
        fi

        style="$COLOR_WHITE"
      fi

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+="${COLOR_GREEN}+"
        style="$COLOR_GREEN"
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+="${COLOR_YELLOW}!"
        style="$COLOR_YELLOW"
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+="${COLOR_RED}?"
        style="$COLOR_RED"
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+="${COLOR_CYAN}$"
        style="$COLOR_CYAN"

      fi

      # The number of commits ahead/behind ends with a trailing space. If no other indicator was added, it will be lingering at the end of `s`.
      s=$(echo "${s}" | sed 's/ *$//')

    fi

    # Get the short symbolic ref.
    # If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')"

    [ -n "${s}" ] && s=" ${style}[${s}]"

    echo "${COLOR_WHITE} ${COLOR_PURPLE}(${branchName})${s}"
  else
    return
  fi
}

__svn_branch()
{
  __svn_url | sed -e 's#^'"$(__svn_repository_root)"'##g' | awk '{print " ("$1")" }'
}

__svn_url()
{
  svn info 2>/dev/null | sed -ne 's#^URL: ##p'
}

__svn_repository_root()
{
  svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p'
}

setup_prompt()
{
  # Local or SSH session?
  local remote=""
  [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && remote=1

  # set the user-color
  local user_color=$COLOR_LIGHT_GREEN           # user's color
  [ $UID -eq "0" ] && user_color=$COLOR_RED     # root's color

  # set the user
  local user=""
  if [[ -z $DEFAULT_USER ]] || [[ $DEFAULT_USER -ne $USER ]]; then
    user=$USER
  fi

  # set the hostname inside SSH session
  local host=""
  [ -n "$remote" ] && host="\[$COLOR_LIGHT_GREEN\]${ICON_FOR_AT}\h"

  # set extra ":" after user || host
  local userOrHostExtra=""
  if [[ -n "$host" ]] || [[ -n $user ]]; then
    userOrHostExtra="\[$user_color\]:"
  fi

  if [[ "$(tty)" == /dev/pts/* ]]; then
    if [[ -n $remote ]] && [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
      export TERM='gnome-256color'
    elif infocmp xterm-256color >/dev/null 2>&1; then
      export TERM='xterm-256color'
    fi
  fi

  local SCM=""
  if command -v git > /dev/null 2>&1; then
    SCM+="\$(__git_prompt)"
  fi
  if command -v svn > /dev/null 2>&1; then
    SCM+="\$(__svn_branch)"
  fi

  # Terminal title
  local TITLE=""
  # echo title sequence only for pseudo terminals
  # real tty do not support title escape sequences.
  if [[ "$(tty)" == /dev/pts/* ]]; then
    TITLE="\[\033]0;${USER}@${HOSTNAME}: \w\007\]"
  fi

  # INFO:   Text (commands) inside \[...\] does not impact line length calculation which fixes stange bug when looking through the history
  #         $? is a status of last command, should be processed every time prompt prints

  # Format prompt
  export PS1="${TITLE}\`if [ \$? -eq 0 ]; then echo -e \[\$COLOR_GREEN\]\${ICON_FOR_TRUE}; else echo -e \[\$COLOR_RED\]\${ICON_FOR_FALSE}; fi\` \[$user_color\]${user}${host}${userOrHostExtra}\[$COLOR_LIGHT_BLUE\]\w\[$COLOR_LIGHT_RED\]${ICON_FOR_ARROW_RIGHT}${SCM}\[$COLOR_NO_COLOUR\] "

  # Multiline command
  export PS2="\[$COLOR_LIGHT_RED\]${ICON_FOR_ARROW_RIGHT}\[$COLOR_NO_COLOUR\]"
}

# Show awesome prompt always
setup_prompt
