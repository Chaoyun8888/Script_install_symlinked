#!/usr/bin/env bash

# make vim the default editor
export PAGER="less"

# use sublime text for local changes
if [[ -n $SSH_CONNECTION ]]; then
  EDITOR="vim"
else
  if which subl >/dev/null 2>&1; then
    EDITOR="subl"
  else
    EDITOR="vim"
  fi
fi
export EDITOR
export VISUAL=$EDITOR

PREVIEW="less"
[ -s /usr/bin/gloobus-preview ] && PREVIEW="gloobus-preview"
[ -s /Applications/Preview.app ] && PREVIEW="/Applications/Preview.app"
export PREVIEW

# detect your os
case "$OSTYPE" in
  solaris*) SYSTEM_TYPE="SOLARIS" ;;
  darwin*)  SYSTEM_TYPE="OSX" ;;
  linux*)   SYSTEM_TYPE="LINUX" ;;
  bsd*)     SYSTEM_TYPE="BSD" ;;
  msys*)    SYSTEM_TYPE="MINGS" ;;
  cygwin*)  SYSTEM_TYPE="CYGWIN" ;;
esac

if [[ "$(uname)" == "Darwin" ]]; then
  SYSTEM_TYPE="OSX"
elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
  SYSTEM_TYPE="LINUX"
elif [[ "$(expr substr $(uname -s) 1 7)" == "FreeBSD" ]]; then
  SYSTEM_TYPE="FREE_BSD"
elif [[ "$(expr substr $(uname -s) 1 6)" == "NetBSD" ]]; then
  SYSTEM_TYPE="NET_BSD"
elif [[ "$(expr substr $(uname -s) 1 7)" == "OpenBSD" ]]; then
  SYSTEM_TYPE="OPEN_BSD"
elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]]; then
  SYSTEM_TYPE="MINGW"
elif [[ "$(expr substr $(uname -s) 1 9)" == "CYGWIN_NT" ]]; then
  SYSTEM_TYPE="CYGWIN"
fi

export SYSTEM_TYPE

if which brew >/dev/null 2>&1; then
  INSTALL_TYPE="BREW"
fi

if which apt-get >/dev/null 2>&1; then
  INSTALL_TYPE="APT"
fi

if which yum >/dev/null 2>&1; then
  INSTALL_TYPE="YUM"
fi

export INSTALL_TYPE

# don't check mail when opening terminal.
#unset MAILCHECK

# make the "sudo" prompt more useful, without requiring access to "visudo"
export SUDO_PROMPT="[sudo] password for %u on %h: "

# PATH addons
if [ -d "$HOME/bin" ]; then
  PATH="$HOME/bin:$PATH"
fi

if [ "$UID" != 0 ]; then
  PATH="$PATH:/usr/local/bin:/usr/sbin:/sbin:/usr/local/sbin"
fi

if which ruby >/dev/null 2>&1 && which gem >/dev/null 2>&1; then
  PATH="$PATH:$(ruby -rubygems -e 'puts Gem.user_dir')/bin"
fi

export PATH

# larger bash history (allow 32³ entries; default is 500)
export HISTSIZE=32768
export HISTFILESIZE=$HISTSIZE

# ignore duplicates commands in the historylog
HISTCONTROL=$HISTCONTROL${HISTCONTROL+:}ignoredups
export HISTCONTROL=ignoredups

# make some commands not show up in history
export HISTIGNORE="clear:pwd:[bf]g:shutdown*:halt*:poweroff*:hibernate*:rm -rf \*"

# add the date to the historylog
#
# Keep track of the time the commands were executed.
# The xterm colour escapes require special care when piping; e.g. "| less -R".
#export HISTTIMEFORMAT=$(echo -e "${COLOR_LIGHT_BLUE}%Y-%m-%d %H:%M:%S${COLOR_NO_COLOUR} ")
export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S"

# use UTF-8
setLocale()
{
  if [[ "$CONFIG_CHARSET_UTF8" == "true" ]]; then
    local i pattern localeOutput localeOutputArray

    localeOutput=$(locale -a 2> /dev/null)
    localeOutputArray=($localeOutput)

    # check if $CONFIG_LANG isset and available
    if [ "$CONFIG_LANG" != "" ] && [ -n "$(echo $localeOutput | grep $CONFIG_LANG)" ] ; then
      pattern="${CONFIG_LANG}\.(UTF-8|UTF8|utf-8|utf8)$"
    else
      pattern=".{2,2}_.{2,2}\.(UTF-8|UTF8|utf-8|utf8)$"
    fi

    for i in "${localeOutputArray[@]}"; do
      if [[ "$i" =~ $pattern ]]; then
        export LC_ALL=${i};
        export LANG=${i};
        export LANGUAGE=${i};
        return 0;
      fi
    done
  fi

  return 1
}
setLocale

if [ $? -eq 1 ]; then
  export UTF8_LANG="0"
else
  export UTF8_LANG="1"
fi

unset -f setLocale

#tty detection
if [[ "$(tty | grep -o '/dev/tty')" == "/dev/tty" ]]; then
  export IS_TTY=1
else
  export IS_TTY=0
fi

# make less the default pager, and specify some useful defaults
less_options=(
  # If the entire text fits on one screen, just show it and quit. (Be more
  # like "cat" and less like "more".)
  --quit-if-one-screen

  # Do not clear the screen first.
  --no-init

  # Like "smartcase" in Vim: ignore case unless the search pattern is mixed.
  --ignore-case

  # Do not automatically wrap long lines.
  # This is a problem for --quit-if-one-screen if there are chopped lines
  #--chop-long-lines

  # Allow ANSI colour escapes, but no other escapes.
  --RAW-CONTROL-CHARS

  # Do not ring the bell when trying to scroll past the end of the buffer.
  --quiet

  # Do not complain when we are on a dumb terminal.
  --dumb
);
export LESS="-irMX -x4 --shift 5 ${less_options[*]}";
unset less_options;

# highlight section titles in manual pages
export LESSHISTFILE="-"     # no less history file
if [ "$UID" != 0 ]; then
    export LESSCHARSET="utf-8"

    if [ -z "$LESSOPEN" ]; then
      [ -x "`which lesspipe 2>/dev/null`" ] && eval "$(lesspipe)"
    fi

    # yep, 'less' can colorize manpages
    export LESS_TERMCAP_mb=$'\E[01;31m'
    export LESS_TERMCAP_md=$'\E[01;31m'
    export LESS_TERMCAP_me=$'\E[0m'
    export LESS_TERMCAP_se=$'\E[0m'
    export LESS_TERMCAP_so=$'\E[01;44;33m'
    export LESS_TERMCAP_ue=$'\E[0m'
    export LESS_TERMCAP_us=$'\E[01;32m'
fi

# don’t clear the screen after quitting a manual page
export MANPAGER="less -X"

# colored GCC (>= v4.9) warnings and errors
export GCC_COLORS="error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"

# always enable colored `grep` output
#
# "ls" and "grep" default options

# colorscheme for OS X `ls` environment variable:
LSCOLORS="Gxfxcxdxbxegedabagacad"

# colorscheme for GNU `ls` environment variable:
LS_COLORS="no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01; 35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:"
LS_OPTIONS="-hFN --color=auto"

GREP_COLOR="1;32"
GREP_OPTIONS=""

# is x grep argument available?
grep-flag-available()
{
  echo | command grep $1 "" >/dev/null 2>&1
}

# color grep results
if grep-flag-available --color=auto; then
  GREP_OPTIONS+=" --color=auto"
fi

# ignore VCS folders (if the necessary grep flags are available)
VCS_FOLDERS="{.bzr,.cvs,.git,.hg,.svn}"

if grep-flag-available --exclude-dir=.cvs; then
  GREP_OPTIONS+=" --exclude-dir=$VCS_FOLDERS"
elif grep-flag-available --exclude=.cvs; then
  GREP_OPTIONS+=" --exclude=$VCS_FOLDERS"
fi

# clean-up
unset VCS_FOLDERS
unset -f grep-flag-available

# some more default color-settings for the root-user
if [ "$UID" = 0 ]; then
  LS_COLORS==""
  LS_OPTIONS="-N --color=auto"
  GREP_OPTIONS=""
fi

# export ls & grep settings
export LSCOLORS="$LSCOLORS"
export LS_COLORS="$LS_COLORS"
export LS_OPTIONS="$LS_OPTIONS"
export GREP_COLOR="$GREP_COLOR"

# grep v2.21 depracates GREP_OPTIONS env var
# old -> export GREP_OPTIONS="$GREP_OPTIONS"

# lazy add local bin
LOCAL_BIN="$HOME/.local/bin"
if [ -d $LOCAL_BIN ]; then
  export PATH="$PATH:$LOCAL_BIN"
fi

# lazy add chromium
if [ -f "/usr/bin/chromium" ]; then
  export CHROME_BIN="/usr/bin/chromium"
fi
if [ -f "/usr/bin/google-chrome" ]; then
  export CHROME_BIN="/usr/bin/google-chrome"
fi
if [ -f "/usr/bin/chromium-browser" ]; then
  export CHROME_BIN="/usr/bin/chromium-browser"
fi

# lazy add firefox
if [ -f "/usr/bin/firefox" ]; then
  export FIREFOX_BIN="/usr/bin/firefox"
fi

# lazy add JAVA_HOME
if [ -d "/usr/lib/jvm/java-7-openjdk" ]; then
  export JAVA_HOME="/usr/lib/jvm/java-7-openjdk"
fi
if [ -d "/usr/lib/jvm/java-7-oracle/jre" ]; then
  export JAVA_HOME="/usr/lib/jvm/java-7-oracle/jre"
fi
if [ -d "/usr/lib/jvm/java-7-oracle" ]; then
  export JAVA_HOME="/usr/lib/jvm/java-7-oracle"
fi
if [ -d "/usr/lib/jvm/java-8-oracle" ]; then
  export JAVA_HOME="/usr/lib/jvm/java-8-oracle"
fi
if [ -d "/usr/lib/jvm/oraclejdk8-64" ]; then
  export JAVA_HOME="/usr/lib/jvm/oraclejdk8-64"
fi
if [ -n "$JAVA_HOME" ]; then
  export JDK_HOME=$JAVA_HOME
  export JRE_HOME=$JAVA_HOME
  export PATH="$JAVA_HOME/bin:$PATH"
fi

# lazy add M2_HOME
if [ -d "/opt/maven" ]; then
  export M2_HOME="/opt/maven"
fi
if [ -d "/usr/share/maven" ]; then
  export M2_HOME="/usr/share/maven"
fi
if [ -n "$M2_HOME" ]; then
  export PATH="$M2_HOME/bin:$PATH"
fi

# lazy add ANDROID_SDK_ROOT
if [ -d "/opt/android-sdk-linux/" ]; then
  export ANDROID_SDK_ROOT="/opt/android-sdk-linux/"
fi
if [ -d "/android-sdk-linux/" ]; then
  export ANDROID_SDK_ROOT="/android-sdk-linux/"
fi
if [ -n "$ANDROID_SDK_ROOT" ]; then
  export ANDROID_NDK=/opt/android-ndk/
  export ANDROID_HOME=$ANDROID_SDK_ROOT
  export PATH="$ANDROID_SDK_ROOT/tools/:$ANDROID_SDK_ROOT/platform-tools/:$PATH"
fi

# ruby version management with rbenv
if [ -d "$HOME/.rbenv" ]; then
  export RBENV_ROOT="$HOME/.rbenv"
  export PATH="$RBENV_ROOT/bin:$PATH"
  eval "$(rbenv init -)"
fi

# ndenv variable
if [ -d "$HOME/.ndenv" ]; then
  export NDENV_HOME="$HOME/.ndenv"
  export PATH="$NDENV_HOME/bin:$PATH"
  eval "$(ndenv init -)"
fi

# jenv settings
if [ -f "$HOME/.jenv/bin/jenv-init.sh" ]; then
  source $HOME/.jenv/bin/jenv-init.sh
fi

# pyenv settings
if [ -d "$HOME/.pyenv/bin" ]; then
  export PATH="$HOME/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

# node-js settings
### Enable persistent REPL history for `node`.
export NODE_REPL_HISTORY_FILE=~/.node_history;
### Allow 32³ entries; the default is 1000.
export NODE_REPL_HISTORY_SIZE='32768';
